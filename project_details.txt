ЭТАПЫ РЕАЛИЗАЦИИ ПРОЕКТА и ВАЖНЫЕ Замечания

1) Создание модели User
2) Создание модели Habit
  - Реализация поля СВЯЗАННОСТИ (Связанная привычка)
  Пример: https://stackoverflow.com/questions/15285626/django-self-referential-foreign-key
3) Создание файла serializers.py и добавление в него сериалайзеров для каждой модели

4) Создание контроллеров в файле views.py

==================================================================================

5) Далее установка pip install djangorestframework-simplejwt
   - Заносим в раздел Приложений "rest_framework_simplejwt" и requirements.txt
   - Добавляем в settings.py
   SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

====================================================================================

6) Валидация. Создание файла validators.py

=======================================================================================

7) ЭТО НАСТРОЙКА ОБЩЕНИЯ МЕЖДУ FRONTEND и BACKEND
CORS (Cross-Origin Resource Sharing) — это механизм безопасности браузера, который ограничивает запросы,
отправляемые с веб-страницы в один домен, к ресурсам, расположенным на другом домене. Это важно для защиты пользователей
от несанкционированного доступа к данным на разных доменах.

Настройка CORS: ИНФОРМАЦИЯ ИЗ УРОКА 26.1 Документирование и безопасность

# Установка пакета
pip install django-cors-headers

# settings.py
INSTALLED_APPS = [
    # ...
    'corsheaders',
    # ...
]

MIDDLEWARE = [
    # ...
    'corsheaders.middleware.CorsMiddleware',
    # ...
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8000',  # Замените на адрес вашего фронтенд-сервера
]

CORS_ALLOW_ALL_ORIGINS = False

=============================================================================

# Возможен вот такой вариант записи
 CORS_ALLOWED_ORIGINS = [
     'http://localhost:8000',
    'http://127.0.0.1:8000'
]
# Возможен вот такой вариант записи
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000'
]
CORS_ALLOW_ALL_ORIGINS = False

ИЛИ

CORS_ALLOWED_ORIGINS = [
    "https://example.com",
    "https://sub.example.com",
    "http://localhost:8080",
    "http://127.0.0.1:9000",
]

CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://\w+\.example\.com$",
]
=============================================================================

# Корректировки CORS от Наставника Олега Маслова.
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [

    'http://localhost:8000',

]

CORS_ALLOWED_ORIGINS = CORS_ORIGIN_WHITELIST

CSRF_TRUSTED_ORIGINS = CORS_ORIGIN_WHITELIST

==============================================================================

8) ИНТЕГРАЦИЯ
* Установите библиотеку Requests с помощью pip:
pip install requests

* Импортируйте библиотеку в файл вашего представления (view) в DRF:
import requests

===============================================================================

9) НАСТРОЙКА ДОКУМЕНТАЦИИ
 В поисковой строке вводим - drf-yasg
отпрываем первую ссылку - https://drf-yasg.readthedocs.io/en/stable/

* Далее переходим во вкладку Usage

* Установка библиотеки pip install -U drf-yasg

* В settings.py в INSTALLED_APPS добавляем 'drf_yasg'

* В config/urls.py вставляем импорты и настройки

    from django.urls import re_path
    from rest_framework import permissions
    from drf_yasg.views import get_schema_view
    from drf_yasg import openapi

    schema_view = get_schema_view(
   openapi.Info(
      title="Snippets API",
      default_version='v1',
      description="Test description",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@snippets.local"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)

   urlpatterns = [
   path('swagger<format>/', schema_view.without_ui(cache_timeout=0), name='schema-json'),
   path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
   path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
   ...
]

* Запускаем Приложение и вводим в поисковой строке: 1-й вариант: http://127.0.0.1:8000/swagger/#/ (путь до swagger)

2-й вариант: http://127.0.0.1:8000/redoc/

Это два варианта документации для созданных энпоинтов.

!!! swagger МОЖНО использовать вместо POSTMAN: для этого нажимаем на "Try it out"

 ======================================================================================

10) Запускается  celery мз Pycharm командой: celery -A proj worker -l info (proj мы заменяем на config)
Где:
config — директория с конфигурацией Django-проекта;
worker — тип запуска, данный параметр запускает обработчик задач из очереди;
 -l INFO — уровень логирования.
ОБРАТИТЕ ВНИМАНИЕ, что для Windows при указании обработчика событий необходимо добавить
флаг  -P eventlet

!!! У меня не запускалась
-------------------------------------------------

celery -A config worker -l info -P eventlet

-------------------------------------------------

!!! ЕЩЁ ОДИН ВАРИАНТ ЗАПУСКА !!!

Запуск Celery worker и планировщика Celery beat.
Чтобы использовать периодические задачи, нужно запустить не только Celery worker, но и планировщик Celery beat. Выполните следующую команду в командной строке:

celery -A my_project worker —loglevel=info / celery -A config worker —loglevel=info (Запустила в 1-м терминале в Pycharm)
celery -A my_project beat —loglevel=info / celery -A config beat -l INFO (Во 2-м терминале в Pycharm)

!!! ПОМОЩЬ ОТ НАСТАВНИКА!!!

Привет, Оксана!
СНАЧАЛА ЗАПУСКАЕМ redis в ТЕРМИНАЛЕ UBUNTU командой redis-server
СНАЧАЛА ЗАПУСКАЕМ НАШ ПРОЕКТ

Лучше сначала запускать celery worker, чтобы он сразу подхватил задачи переданные beat, а потом уже beat

Давай попробуем запустить beat так:

- celery -A config beat -l INFO -S django

А воркер так:

- celery -A config worker -l INFO -P eventlet

Предварительно необходимо установить eventlet в окружение:

pip install eventlet

==========================================================================

ЧТОБЫ ПРОВАЛИТЬСЯ В ФУНКЦИЮ, КЛАСС ИЛИ МЕТОД, нужно:
 * выделить синим цветом объект
 * зажать Ctrl
 * Нажать курсором мышки на выделенный объект

 =========================================================================
 ПРОВЕРЯЕМ НАСТРОЙКИ celery и celery beat

 # тестовая задача проверки celery (в habits/tasks.py)
 @shared_task
 def send_time_test():
     today = timezone.now().today().date()
     print(today)

# Программирование задачи на выполнение (в settings.py)
CELERY_BEAT_SCHEDULE = {
    'blocking_a_user': {
        'task': 'habits.tasks.send_time_test',  # Путь к задаче
        'schedule': timedelta(minutes=1),  # Расписание выполнения задачи (например, timedelta(days=1) каждый день)
    },
}

ДАЛЕЕ ЗАПУСКАЕМ celery и celery beat (как описано выше)
===========================================================================

 ОТПРАВКА УВЕДОМЛЕНИЯ В ТЕЛЕГРАММ БОТ

1) РЕГИСТРИРУЕМ собственного БОТА и получаем его ТОКЕН

Для того, чтобы зарегистрировать собственного бота в Telegram, вам понадобится помощь другого бота,
которого зовут BotFather.
Он предложит придумать имя, которое будет отображаться в списке контактов
и юзернейм ботонейм по которому ваш бот будет доступен через ссылки и в поиске.
Позже, при помощи BotFather, можно будет изменять специфические настройки бота, или установить для него юзерпик ботопик.

2) ПОЛУЧАЕМ ID чата
Не смотря на то, что бот пока ничего не умеет, сейчас он уже доступен для поиска и добавления в чаты.

Добавьте его в свой список контактов. Проще всего это сделать пройдя по ссылке вида t.me/botname
Отправьте ему любое сообщение
Через браузер открывайте ссылку https://api.telegram.org/bot%TOKEN%/getUpdates заменив %TOKEN% на строку,
которую вам выдал BotFather ранее
Вы увидите JSON, который будет содержать все необходимые данные о последнем сообщении.

3) ПИШЕМ задачу отправки сообщения в habits/services.py

import requests
from django.conf import settings


def send_tg_message(telegram_id, message):
    """
    Функция отправки сообщения в Телеграмм-бот.
    :param telegram_id: id чата с пользователем в Telegram
    :param message: сообщение, которое будет отправлено пользователю
    :return:
    """
    params = {
        'text': message,
        'chat_id': telegram_id,
    }
    response = requests.post(f'{settings.TELEGRAM_URL}{settings.TELEGRAM_TOKEN}/sendMessage', params=params)

4) УСТАНАВЛИВАЕМ настройкив для отправки в settings.py

# Настройка отправки сообщения в телеграмм
TELEGRAM_URL = 'https://api.telegram.org/bot'
BOT_TOKEN = os.getenv('BOT_TOKEN')
TELEGRAM_USER_ID = os.getenv('TELEGRAM_USER_ID')

=======================================================================

!!!! БЫЛА ОШИБКА В ВЫВОДЕ ПОЛЕЙ!!!! НЕОБХОДИМА ВОТ ТАКАЯ ЗАПИСЬ ДАТЫ!!!

          "start_date": self.habit.start_date.strftime('%Y-%m-%d'),
          "send_date": self.habit.send_date.strftime('%Y-%m-%d'),

========================================================================

Вариант Маши:

def send_tg_message(message, chat_id):
    """
    Отправка сообщения в Telegram
    :param message: текст сообщения для отправки
    :param chat_id: id чата с пользователем в Telegram
    """
    params = {
        'text': message,
        'chat_id': chat_id
    }
    try:
        response = requests.get(f'https://api.telegram.org/bot{settings.TG_BOT_TOKEN}/sendMessage', params=params)
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"Ошибка при отправке сообщения в Telegram: {e}")

    except Exception as e:
        print(f"Произошла непредвиденная ошибка: {e}")

=============================================================================

У МЕНЯ ВЫХОДИЛА ОШИБКА ПОСЛЕ ДОБАВЛЕНИЯ ПОЛЕЙ start_date и send_date.

ОТВЕТ НАСТАВНИКА: Необходимо использовать today:
    * today = date.today()
https://www.geeksforgeeks.org/get-current-date-using-python/?ysclid=lxrp6730p2658851264

https://docs.djangoproject.com/en/5.0/ref/models/fields/

=============================================================================

НА ВОПРОС ПО ПОВОДУ ПОЛУЧЕНИЯ chat_id

ОТВЕТ НАСТАВНИКА: https://perfluence.net/blog/article/kak-uznat-id-telegra

==============================================================================

УПАКОВКА В Docker

1) СОЗДАЕМ в корневой директории файл Dockerfile (После установки Докера на комьютере,
при создании новоно файла будет вариант выбора разновидности Dockerfile)

2) ЗАПОЛНЯЕМ  Dockerfile (здесь скопировала с пояснениями, что из чего берется)

ЗАДАЕМ ПОСЛОЙНЫЙ СПИСОК ОБРАЗОВ (В нашем случае мы выбираем Python)

---------------------------------------------------------------------------------------------------------
# slim обозначает, что мы запрашиваем более легковесную версию без дополнительных утилит (здесь её хватит)
FROM python:3.12-slim

# Создаем рабочую директорию
WORKDIR /app

# Наполняем рабочую директорию. Путь не прописываем, так как обафайла лежат рядом, в корневой директории
COPY /requirements.txt /

# Устанавливаем все зависимости
# --no-cash-dir эту информацию добаваляем, чтобы у нас не кэшировался список зависимостей, а всегда обновлялся актуальный
#RUN pip install -r /requirements.txt --no-cash-dir
RUN pip install --no-cache-dir -r /requirements.txt

# Копируем наше приложение (то есть всю информацию из текущей директории в рабочую)
COPY . .

# Команда для запуска приложения при старте контейнера для постановки знака комбинация клавиш (Alt+38)
# sh - настройка работы с оболочками
#CMD ["sh", "-c", "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
# !!! КОМАНДА была перенесена в файл docker-compose.yaml, поэтому отсюда её удаляем
 -----------------------------------------------------------------------------------------------------------

3) СОЗДАЕМ ФАЙЛ docker-compose.yaml (!!! ВНИМАНИЕ это тире, а не нижнее подчеркивание)

ПРИМЕР И ОБЪЯСНЕНИЕ: https://habr.com/ru/articles/578744/ , https://habr.com/ru/articles/823816/

ВНОСИМ В НЕГО НАСТРОЙКИ ДЛЯ НАШИХ КОНТЕЙНЕРОВ (написано с комментами)

---------------------------------------------------------------------------------------------------------

# Задаем версию. Версия №3 является актуальной
version: "3"

# Описываем сервисы, которые будут запускаться
services:
  # Название сервиса.
  redis:
    # Образ, на основании которого будет запускаться контейнер
    image: redis:latest
    # Настройка, которая перезагружает работу redis при его падения
    restart: on-failure
    expose:
      - "6379"

  # Название сервиса. В данном случае описываем КОНТЕЙНЕР С postgres
  db:
    # Образ, на основании которого будет запускаться контейнер
    image: postgres:16-alpine
    # Настройка, которая перезагружает работу postgres после падения
    restart: on-failure
    env_file:
      - .env
    # Закрываем порт от внешнего доступа. В сети контейнеры будут иметь доступ
    expose:
      - "5432"
    # Данная настройка необходима, чтобы наши изменения сохранялись в postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    # Это проверка на то, что postgres у нас работает и с ним всё хорошо
    # Через знак $ у нас идет обращение к значению переменной POSTGRES_USER, скрытому в файле .env
    healthcheck:
      test: ["CMD-SHELL", "-c", "pg_isready -U $POSTGRES_USER"]
      # С какой периодичностью идет запрос на проверку работы postgres
      interval: 10s
      # Количество попыток
      retries: 5
      # Если в течение 5 сек не отвечает, то повторный запрос
      timeout: 5s

  # Название сервиса. В данном случае описываем КОНТЕЙНЕР С Приложением
  app:
    # В данном случае контейнер будет содираться на основе Dockerfile  в нашем проекте
    build: .
    # Настройка для интерактивного режима
    tty: true
    ports:
      - "8000:8000"
    # Добавляем команду для запуска. Она была перенесена из файла Dockerfile
    command: sh -c "python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
    # Описываем наши зависимости. Контейнер postgres должен быть готовым к работе раньша
    depends_on:
      db:
        condition: service_healthy
    # Данная настройка необходима, чтобы наши изменения сохранялись в app
    volumes:
      - .:/app
    env_file:
      - .env

  # Название сервиса.
  celery:
    build: .
    tty: true
    command: celery -A config worker -l INFO
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - app
    env_file:
      - .env

  celery-beat:
    build: .
    tty: true
    command: celery -A config beat -l INFO
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - app
    env_file:
      - .env


# Данная настройка необходима, чтобы наши изменения сохранялись в postgres
volumes:
  pg_data:

-------------------------------------------------------------------------------------------------
Создать фикстуры:

- python -Xutf8 manage.py dumpdata auth.group -o data_groups.json (весь проект в целом)
- python -Xutf8 manage.py dumpdata -o data.json (только группы из Админки)
- python -Xutf8 manage.py dumpdata users -o users.json (для приложения users)