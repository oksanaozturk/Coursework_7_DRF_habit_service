ЭТАПЫ РЕАЛИЗАЦИИ ПРОЕКТА и ВАЖНЫЕ Замечания

1) Создание модели User
2) Создание модели Habit
  - Реализация поля СВЯЗАННОСТИ (Связанная привычка)
  Пример: https://stackoverflow.com/questions/15285626/django-self-referential-foreign-key
3) Создание файла serializers.py и добавление в него сериалайзеров для каждой модели

4) Создание контроллеров в файле views.py

==================================================================================

5) Далее установка pip install djangorestframework-simplejwt
   - Заносим в раздел Приложений "rest_framework_simplejwt" и requirements.txt
   - Добавляем в settings.py
   SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}

====================================================================================

6) Валидация. Создание файла validators.py

=======================================================================================

7) ЭТО НАСТРОЙКА ОБЩЕНИЯ МЕЖДУ FRONTEND и BACKEND
CORS (Cross-Origin Resource Sharing) — это механизм безопасности браузера, который ограничивает запросы,
отправляемые с веб-страницы в один домен, к ресурсам, расположенным на другом домене. Это важно для защиты пользователей
от несанкционированного доступа к данным на разных доменах.

Настройка CORS: ИНФОРМАЦИЯ ИЗ УРОКА 26.1 Документирование и безопасность

# Установка пакета
pip install django-cors-headers

# settings.py
INSTALLED_APPS = [
    # ...
    'corsheaders',
    # ...
]

MIDDLEWARE = [
    # ...
    'corsheaders.middleware.CorsMiddleware',
    # ...
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8000',  # Замените на адрес вашего фронтенд-сервера
]

CORS_ALLOW_ALL_ORIGINS = False

=============================================================================

8) ИНТЕГРАЦИЯ
* Установите библиотеку Requests с помощью pip:
pip install requests

* Импортируйте библиотеку в файл вашего представления (view) в DRF:
import requests

===============================================================================

9) НАСТРОЙКА ДОКУМЕНТАЦИИ
 В поисковой строке вводим - drf-yasg
отпрываем первую ссылку - https://drf-yasg.readthedocs.io/en/stable/

* Далее переходим во вкладку Usage

* Установка библиотеки pip install -U drf-yasg

* В settings.py в INSTALLED_APPS добавляем 'drf_yasg'

* В config/urls.py вставляем импорты и настройки

    from django.urls import re_path
    from rest_framework import permissions
    from drf_yasg.views import get_schema_view
    from drf_yasg import openapi

    schema_view = get_schema_view(
   openapi.Info(
      title="Snippets API",
      default_version='v1',
      description="Test description",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@snippets.local"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)

   urlpatterns = [
   path('swagger<format>/', schema_view.without_ui(cache_timeout=0), name='schema-json'),
   path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
   path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
   ...
]

* Запускаем Приложение и вводим в поисковой строке: 1-й вариант: http://127.0.0.1:8000/swagger/#/ (путь до swagger)

2-й вариант: http://127.0.0.1:8000/redoc/

Это два варианта документации для созданных энпоинтов.

!!! swagger МОЖНО использовать вместо POSTMAN: для этого нажимаем на "Try it out"

 ======================================================================================

10) Запускается  celery мз Pycharm командой: celery -A proj worker -l info (proj мы заменяем на config)
Где:
config — директория с конфигурацией Django-проекта;
worker — тип запуска, данный параметр запускает обработчик задач из очереди;
 -l INFO — уровень логирования.
ОБРАТИТЕ ВНИМАНИЕ, что для Windows при указании обработчика событий необходимо добавить
флаг  -P eventlet

!!! У меня не запускалась
-------------------------------------------------

celery -A config worker -l info -P eventlet

-------------------------------------------------

!!! ЕЩЁ ОДИН ВАРИАНТ ЗАПУСКА !!!

Запуск Celery worker и планировщика Celery beat.
Чтобы использовать периодические задачи, нужно запустить не только Celery worker, но и планировщик Celery beat. Выполните следующую команду в командной строке:

celery -A my_project worker —loglevel=info / celery -A config worker —loglevel=info (Запустила в 1-м терминале в Pycharm)
celery -A my_project beat —loglevel=info / celery -A config beat -l INFO (Во 2-м терминале в Pycharm)
